apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: blocky
spec:
  interval: 1h
  chart:
    spec:
      # registryUrl=https://k8s-at-home.com/charts/
      chart: blocky
      version: 5.0.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home
        namespace: flux-system
  values:
    image:
      repository: spx01/blocky
      tag: v0.14
    timeZone: America/Chicago
    serviceTCP:
      enabled: true
      type: LoadBalancer
      annotations:
        metallb.universe.tf/allow-shared-ip: blocky-svc
    serviceUDP:
      enabled: true
      type: LoadBalancer
      annotations:
        metallb.universe.tf/allow-shared-ip: blocky-svc
    serviceMonitor:
      enabled: true

    # blocky configuration
    config: |
      upstream:
        # these external DNS resolvers will be used. Blocky picks 2 random resolvers from the list for each query
        # format for resolver: net:host:[port][/path]. net could be tcp, udp, tcp-tls or https (DoH). If port is empty, default port will be used (53 for udp and tcp, 853 for tcp-tls, 443 for https (Doh))
        externalResolvers:
        - udp:1.1.1.1
        - tcp-tls:1.0.0.1:853
        - https://cloudflare-dns.com/dns-query
        - udp:8.8.8.8

      # optional: custom IP address for domain name (with all sub-domains)
      # example: query "printer.lan" or "my.printer.lan" will return 192.168.178.3
      # customDNS:
      #   mapping:
      #     printer.lan: 192.168.178.3
      customDNS:
        mapping:
          localhost: 127.0.0.1
          zro.net: 10.72.48.1
          zro.io: 10.72.48.1

      # optional: definition, which DNS resolver should be used for queries to the domain (with all sub-domains).
      # Example: Query client.fritz.box will ask DNS server 192.168.178.1. This is necessary for local network, to resolve clients by host name
      # conditional:
      #   mapping:
      #     fritz.box: udp:192.168.178.1

      # optional: use black and white lists to block queries (for example ads, trackers, adult pages etc.)
      blocking:
        # definition of blacklist groups. Can be external link (http/https) or local file
        blackLists:
          # which response will be sent, if query is blocked:
          #   zeroIp: 0.0.0.0 will be returned (default)
          #   nxDomain: return NXDOMAIN as return code
          # blockType: zeroIp

          # optional: automatically list refresh period in minutes. Default: 4h.
          # Negative value -> deactivate automatically refresh.
          # 0 value -> use default
          # refreshPeriod: 1

          ads:
          - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
          - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
          - https://mirror1.malwaredomains.com/files/justdomains
          - http://sysctl.org/cameleon/hosts
          - https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist
          - https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
          special:
          - https://hosts-file.net/ad_servers.txt
          - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews

        # definition of whitelist groups. Attention: if the same group has black and whitelists,
        # whitelists will be used to disable particular blacklist entries. If a group has only
        # whitelist entries -> this means only domains from this list are allowed,
        # all other domains will be blocked.
        # Also see the extraLists section below to add your own in-line whitelists
        # whiteLists:
        #   ads:
        #     - whitelist.txt

        # definition: which groups should be applied for which client
        clientGroupsBlock:
          # default will be used, if no special definition for a client name exists
          default:
          - ads
          - special
          # use client name or ip address
          # laptop.fritz.box:
          #   - ads

      # optional: configuration for caching of DNS responses
      # caching:
      #   # amount in minutes, how long a response must be cached (min value).
      #   # If <=0, use response's TTL, if >0 use this value, if TTL is smaller
      #   # Default: 0
      #   minTime: 40
      #   # amount in minutes, how long a response must be cached (max value).
      #   # If <0, do not cache responses
      #   # If 0, use TTL
      #   # If > 0, use this value, if TTL is greater
      #   # Default: 0
      #   maxTime: -1

      # optional: configuration of client name resolution
      # clientLookup:
      #   # this DNS resolver will be used to perform reverse DNS lookup (typically local router)
      #   upstream: udp:192.168.178.1
      #   # optional: some routers return multiple names for client (host name and user defined name). Define which single name should be used.
      #   # Example: take second name if present, if not take first name
      #   singleNameOrder:
      #     - 2
      #     - 1
      # optional: configuration for prometheus metrics endpoint
      prometheus:
        # enabled if true
        enable: true
        # url path, optional (default '/metrics')
        path: /metrics

      # optional: HTTP listener port, default 0 = no http listener. If > 0, will be used for prometheus metrics, pprof, ...
      httpPort: 4000
      # optional: Log level (one from debug, info, warn, error). Default: info
      logLevel: info
